rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user is a trainer (includes both trainer and superTrainer)
    function isTrainer() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superTrainer');
    }
    
    // Check if user is a super trainer
    function isSuperTrainer() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superTrainer';
    }
    
    // Check if user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Check if the current user is assigned as a trainer for a given client document
    function isAssignedTrainer(clientData) {
      return isTrainer() && (
        clientData.trainerId == request.auth.uid ||
        (clientData.trainerIds is list && request.auth.uid in clientData.trainerIds)
      );
    }
    
    // Check if the current user is assigned to a specific client by userId
    function isAssignedToClient(clientUserId) {
      return isTrainer() && 
        exists(/databases/$(database)/documents/users/$(clientUserId)) &&
        isAssignedTrainer(get(/databases/$(database)/documents/users/$(clientUserId)).data);
    }
    
    // Helper function to check if user is a family member
    function isFamilyMember(familyData) {
      return familyData.organizerId == request.auth.uid;
    }
    
    // Helper function to check if user is a family member in a session
    function isSessionFamilyMember(sessionData) {
      return sessionData.isBookingForFamily == true &&
             sessionData.familyMembers is list;
    }
    
    // Trainer Videos Collection Rules (SHARED ACROSS ALL TRAINERS)
    match /trainerVideos/{videoId} {
      // All trainers and super trainers share the same video gallery
      // Any trainer can create, read, update, and delete any video
      // Clients can view videos from their assigned trainer
      // Admins can do everything
      
      // Read access - all trainers, clients, and admins can read all videos
      allow read: if isAuthenticated() && (
                    isTrainer() ||
                    isAdmin() ||
                    // Clients can view videos
                    exists(/databases/$(database)/documents/users/$(request.auth.uid))
                  );
      
      // Create access - any trainer or super trainer can upload videos
      allow create: if isAuthenticated() && isTrainer();
      
      // Update access - any trainer or super trainer can update any video
      allow update: if isAuthenticated() && isTrainer();
      
      // Delete access - any trainer or super trainer can delete any video
      allow delete: if isAuthenticated() && isTrainer();
    }
    
    // User Collection Rules
    match /users/{userId} {
      // Allow any authenticated user to read any user document (loose rule for development & family search)
      allow read: if isAuthenticated();
      
      // Allow clients to read trainer documents specifically
      allow read: if isAuthenticated() && 
                    exists(/databases/$(database)/documents/users/$(userId)) &&
                    get(/databases/$(database)/documents/users/$(userId)).data.role in ['trainer', 'superTrainer'];
      
      // Allow listing users with reasonable limits
      // Trainers and admins can list all users
      // Clients can query for trainers (for booking sessions)
      allow list: if isAuthenticated();
      
      // Allow a user to create their own document during signup
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow users to update their own documents
      // Allow admins and super trainers to update any user
      // Allow trainers to update their clients' profiles
      // Allow family-related updates when accepting/declining invitations
      allow update: if isAuthenticated() && (
                      request.auth.uid == userId || 
                      isAdmin() ||
                      isSuperTrainer() ||
                      // Allow trainers to update their clients' profiles
                      isAssignedTrainer(resource.data) ||
                      // Allow family-related updates (when accepting/declining family invitations)
                      (request.auth.uid == userId && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['familyId', 'isFamilyOrganizer'])) ||
                      // Allow family organizers to update family-related fields for their family members
                      (resource.data.familyId != null &&
                       exists(/databases/$(database)/documents/families/$(resource.data.familyId)) &&
                       get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.organizerId == request.auth.uid &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['familyId', 'isFamilyOrganizer']))
                    );
                    
      // Allow users to delete their own account, admins and super trainers can delete any user
      allow delete: if isAuthenticated() && (request.auth.uid == userId || isAdmin() || isSuperTrainer());
      
      // Allow trainers to list all clients (for client list screens)
      match /{allSubcollections=**} {
        allow read: if isAuthenticated() && (
                      isOwner(userId) || 
                      isTrainer() ||
                      isAdmin()
                    );
      }
    }
    
    // Weight History Collection Rules
    match /weightHistory/{entryId} {
      // Allow users to read their own weight history
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow users to create their own weight history entries
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Allow users to delete their own weight history
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow trainers to read client weight history
      allow read: if isAuthenticated() && isTrainer();
      
      // Admins and super trainers can do everything
      allow read, write: if isAuthenticated() && (isAdmin() || isSuperTrainer());
    }
    
    // Workout Collection Rules
    match /workouts/{workoutId} {
      // Users can read and write their own workouts
      // Trainers can read and write workouts for their clients
      // Admins can read and write all workouts
      allow read: if isAuthenticated() && (
                    resource.data.userId == request.auth.uid || 
                    isTrainer() ||
                    isAdmin()
                  );
      allow create: if isAuthenticated() && (
                      request.resource.data.userId == request.auth.uid || 
                      isTrainer() ||
                      isAdmin()
                    );
      allow update: if isAuthenticated() && (
                      resource.data.userId == request.auth.uid || 
                      isTrainer() ||
                      isAdmin()
                    );
      allow delete: if isAuthenticated() && (
                      resource.data.userId == request.auth.uid || 
                      isTrainer() ||
                      isAdmin()
                    );
    }
    
    // Workout Templates Collection Rules
    // Workout Templates Collection Rules (SHARED ACROSS ALL TRAINERS)
    match /workoutTemplates/{templateId} {
      // All trainers and super trainers share the same workout templates
      // Any trainer can create, read, update, and delete any template
      // Admins can read and write all templates
      allow read: if isAuthenticated() && (isTrainer() || isAdmin());
      allow create: if isAuthenticated() && isTrainer();
      allow update: if isAuthenticated() && isTrainer();
      allow delete: if isAuthenticated() && (isTrainer() || isAdmin());
    }
    
    // Assigned Workouts Collection Rules
    match /assignedWorkouts/{workoutId} {
      // Trainers can read ALL assigned workouts
      allow read, list: if isAuthenticated() && isTrainer();
      
      // Clients can read and update their own assigned workouts
      allow read, update: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Clients can delete their own assigned workouts (for account deletion)
      allow delete: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Trainers can create, update, and delete workouts for their assigned clients
      allow create: if isAuthenticated() && isTrainer();
      allow update, delete: if isAuthenticated() && isTrainer() && isAssignedToClient(resource.data.clientId);
      
      // Admins and super trainers can do everything
      allow read, write: if isAdmin() || isSuperTrainer();
      
      // Allow client to update workout status
      allow update: if request.auth != null && 
                     request.auth.uid == resource.data.clientId &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'completedExercises', 'lastModified']);
    }
    
    // Nutrition Plans Collection Rules
    match /nutritionPlans/{planId} {
      // Trainers can read ALL nutrition plans
      allow read, list: if isAuthenticated() && isTrainer();
      
      // Clients can read their own nutrition plans
      allow read: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Clients can delete their own nutrition plans (for account deletion)
      allow delete: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Trainers can create, update, and delete nutrition plans they assigned
      allow create: if isAuthenticated() && isTrainer();
      allow update, delete: if isAuthenticated() && isTrainer() && resource.data.trainerId == request.auth.uid;
      
      // Admins and super trainers can do everything
      allow read, write: if isAdmin() || isSuperTrainer();
    }

    // Nutrition Plan Templates Collection Rules
    // Nutrition Plan Templates Collection Rules (SHARED ACROSS ALL TRAINERS)
    match /nutritionPlanTemplates/{templateId} {
      // All trainers and super trainers share the same nutrition plan templates
      // Any trainer can create, read, update, and delete any template
      allow read, list: if isAuthenticated() && (isTrainer() || isAdmin());
      allow create: if isAuthenticated() && isTrainer();
      allow update: if isAuthenticated() && isTrainer();
      allow delete: if isAuthenticated() && (isTrainer() || isAdmin());
    }

    // Workout Progress Collection Rules
    match /workoutProgress/{progressId} {
      // Clients can read and write their own workout progress
      allow read, write: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Clients can delete their own workout progress (for account deletion)
      allow delete: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Trainers can read workout progress for their clients
      allow read: if isAuthenticated() && isTrainer();
      
      // Admins and super trainers can do everything
      allow read, write: if isAdmin() || isSuperTrainer();
    }
    
    // Program Collection Rules
    match /programs/{programId} {
      // Anyone can read programs
      // Only trainers and admins can create, update, delete programs
      allow read: if true;
      allow create: if isTrainer() || isAdmin();
      allow update: if isTrainer() && resource.data.trainerId == request.auth.uid || isAdmin() || isSuperTrainer();
      allow delete: if isTrainer() && resource.data.trainerId == request.auth.uid || isAdmin() || isSuperTrainer();
    }
    
    // Body Composition Collection Rules
    match /bodyComp/{userId}/{entryId} {
      // Users can read and write their own body composition data
      // Trainers can read body composition data for their clients
      // Admins can read and write all body composition data
      allow read: if isOwner(userId) || isTrainer() || isAdmin();
      allow create: if isOwner(userId) || isAdmin() || isSuperTrainer();
      allow update: if isOwner(userId) || isAdmin() || isSuperTrainer();
      allow delete: if isOwner(userId) || isAdmin() || isSuperTrainer();
    }
    
    // Food Log Collection Rules
    match /foodLogs/{logId} {
      // Users can read and write their own food logs
      // Trainers can read food logs for their clients
      // Admins can read and write all food logs
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isTrainer() || isAdmin());
      allow create: if isAuthenticated() && 
        (request.resource.data.userId == request.auth.uid || isAdmin() || isSuperTrainer());
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin() || isSuperTrainer());
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin() || isSuperTrainer());
    }
    
    // Messaging Collections
    // Conversations Collection Rules
    match /conversations/{conversationId} {
      // Users can read conversations if they are part of it OR if they are trying to create it
      allow read: if isAuthenticated();
      
      // Users can create conversations if they are one of the participants
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      
      // Users can update conversations they are part of
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Users can delete conversations they are part of (or admins)
      allow delete: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants || isAdmin());
    }
    
    // Messages Collection Rules
    match /messages/{messageId} {
      // Users can read messages if authenticated
      allow read: if isAuthenticated();
      
      // Users can create messages if they are the sender
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      
      // Users can update messages (for read status)
      allow update: if isAuthenticated();
      
      // Users can delete their own messages (or admins)
      allow delete: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || isAdmin());
    }
    
    // Sessions Collection Rules (used for client and family sessions)
    match /sessions/{sessionId} {
      // Allow trainers to read their sessions
      allow read: if isAuthenticated() && resource.data.trainerId == request.auth.uid;
      
      // Allow primary client to read their sessions
      allow read: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Allow family members to read sessions where they are listed in familyMembers
      allow read: if isAuthenticated() &&
        resource.data.isBookingForFamily == true &&
        resource.data.familyMembers is list &&
        resource.data.familyMembers.hasAny(['uid'], request.auth.uid);
      
      // Allow listing sessions for authenticated users (will be filtered by queries)
      allow list: if isAuthenticated();

      // Allow creating sessions (booking) by trainer or primary client
      allow create: if isAuthenticated() && (
        request.resource.data.clientId == request.auth.uid ||
        request.resource.data.trainerId == request.auth.uid ||
        isTrainer() || isAdmin() || isSuperTrainer()
      );

      // Allow updating session status (e.g., cancelling or completing)
      // - Primary client can update status & notes
      // - Trainer can update any of their sessions
      // - Family members listed on the session can update status & notes
      allow update: if isAuthenticated() && (
        (
          // Primary client updating limited fields
          request.auth.uid == resource.data.clientId &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status','notes'])
        ) || (
          // Trainer updating their own session
          request.auth.uid == resource.data.trainerId
        ) || (
          // Family member updating limited fields
          resource.data.isBookingForFamily == true &&
          resource.data.familyMembers is list &&
          resource.data.familyMembers.hasAny(['uid'], request.auth.uid) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status','notes'])
        ) || (
          // Admins & super trainers
          isAdmin() || isSuperTrainer()
        )
      );

      // Allow deleting sessions by trainers or admins
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.trainerId ||
        isAdmin() || isSuperTrainer()
      );
    }
    
    // Weight Entries Collection Rules
    match /weightEntries/{entryId} {
      // Users can read and write their own weight entries
      // Trainers can read weight entries for their clients
      // Admins can read and write all weight entries
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isTrainer() || isAdmin());
      allow create: if isAuthenticated() && 
        (request.resource.data.userId == request.auth.uid || isAdmin() || isSuperTrainer());
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin() || isSuperTrainer());
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin() || isSuperTrainer());
    }
    
    // Activity Feed Collection Rules
    match /activityFeed/{activityId} {
      // Users can read their own activity feed
      // Trainers can read and write their own activity feed
      // Admins can read and write all activity feeds
      allow read: if isAuthenticated() && 
        (resource.data.trainerId == request.auth.uid || isAdmin() || isSuperTrainer());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.trainerId == request.auth.uid || isAdmin() || isSuperTrainer());
      allow delete: if isAuthenticated() && 
        (resource.data.trainerId == request.auth.uid || isAdmin() || isSuperTrainer());
      
      // Clients and trainers can read activities relevant to them
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.clientId || 
                    request.auth.uid == resource.data.trainerId
                  );
      // Only system or trainers can create activities
      allow create: if request.auth != null;
    }
    
    // Meals Collection Rules
    match /meals/{mealId} {
      // Client can read their own meals
      // Trainers can read their clients' meals
      allow read: if request.auth != null && (
                    // Client can read their own meals
                    request.auth.uid == resource.data.clientId || 
                    // Trainers can read their clients' meals - simplified check
                    (isTrainer() && exists(/databases/$(database)/documents/users/$(resource.data.clientId)) && 
                    get(/databases/$(database)/documents/users/$(resource.data.clientId)).data.trainerId == request.auth.uid) ||
                    // Admin can read all meals
                    isAdmin() || isSuperTrainer()
                  );
      
      // Client can create/update/delete their own meals
      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.clientId;
      
      // Allow clients to delete their own meals (for account deletion)
      allow delete: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Allow trainers to list meals for their clients
      allow list: if isAuthenticated() && isTrainer();
    }
    
    // Trainer Locations Collection Rules
    match /trainer_locations/{trainerId} {
      // Allow trainers to write and read their own location data
      allow write, read: if isAuthenticated() && request.auth.uid == trainerId;
      
      // Allow clients to read their trainer's location data
      allow read: if isAuthenticated() && 
                  exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.trainerId == trainerId;
      
      // Allow admins and super trainers full access
      allow read, write: if isAdmin() || isSuperTrainer();
    }
    
    // Onboarding Forms Collection Rules
    match /onboardingForms/{formId} {
      // Clients can create and read their own onboarding form
      allow create: if isAuthenticated();
      
      // Clients can read their own onboarding form (support both clientId and userId fields)
      allow read: if isAuthenticated() && (resource.data.clientId == request.auth.uid || resource.data.userId == request.auth.uid);
      
      // Clients can delete their own onboarding form (for account deletion - support both clientId and userId)
      allow delete: if isAuthenticated() && (resource.data.clientId == request.auth.uid || resource.data.userId == request.auth.uid);
      
      // Trainers can read any onboarding form (simplified for troubleshooting)
      allow read, list: if isAuthenticated() && isTrainer();
      
      // Allow admins and super trainers full access
      allow read, write: if isAdmin() || isSuperTrainer();
      
      // Allow uploading gym setup photos
      allow update: if isAuthenticated() && 
                    (resource.data.clientId == request.auth.uid || 
                     resource.data.userId == request.auth.uid ||
                     isTrainer() || 
                     isAdmin() || isSuperTrainer());
    }
    
    // Session Packages Collection Rules
    match /sessionPackages/{packageId} {
      // Clients can read their own session packages
      allow read: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Family members can read session packages for their family organizer (for family session booking)
      allow read: if isAuthenticated() && 
                  exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId != null &&
                  exists(/databases/$(database)/documents/families/$(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId)) &&
                  get(/databases/$(database)/documents/families/$(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId)).data.organizerId == resource.data.clientId;
      
      // Clients can delete their own session packages (for account deletion)
      allow delete: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Trainers can read and write session packages for their clients
      allow read, write: if isAuthenticated() && 
                         isTrainer() && 
                         resource.data.trainerId == request.auth.uid;
      
      // Allow trainers to list/query session packages (for finding client packages)
      allow list: if isAuthenticated() && isTrainer();
      
      // Allow creating session packages for client-trainer relationships
      allow create: if isAuthenticated() && 
                    isTrainer() && 
                    request.resource.data.trainerId == request.auth.uid;
      
      // Allow updating session packages (for payments and adjustments)
      allow update: if isAuthenticated() && 
                    (resource.data.trainerId == request.auth.uid || 
                     resource.data.clientId == request.auth.uid);
      
      // Family members can update session packages for their family organizer (for family session booking)
      allow update: if isAuthenticated() && 
                    exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId != null &&
                    exists(/databases/$(database)/documents/families/$(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId)) &&
                    get(/databases/$(database)/documents/families/$(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId)).data.organizerId == resource.data.clientId;
      
      // Admins and super trainers can do everything
      allow read, write: if isAdmin() || isSuperTrainer();
    }
    
    // Payment History Collection Rules
    match /paymentHistory/{paymentId} {
      // Clients can read their own payment history
      allow read: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Clients can delete their own payment history (for account deletion)
      allow delete: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Trainers can read payment history for their clients
      allow read: if isAuthenticated() && 
                  isTrainer() && 
                  resource.data.trainerId == request.auth.uid;
      
      // Allow trainers to list/query payment history (for client payment tabs)
      allow list: if isAuthenticated() && isTrainer();
      
      // Only system (via Cloud Functions) can create payment history
      // But we need to allow authenticated users for the webhook
      allow create: if isAuthenticated();
      
      // Admins and super trainers can do everything
      allow read, write: if isAdmin() || isSuperTrainer();
    }
    
    // Training Sessions Collection Rules
    match /training_sessions/{sessionId} {
      // Trainers can read and write their own training sessions
      allow read, write: if isAuthenticated() && 
                         isTrainer() && 
                         resource.data.trainerId == request.auth.uid;
      
      // Clients can read their own training sessions
      allow read: if isAuthenticated() && 
                  resource.data.clientId == request.auth.uid;
      
      // Allow creating training sessions for trainers
      allow create: if isAuthenticated() && 
                    isTrainer() && 
                    request.resource.data.trainerId == request.auth.uid;
      
      // Allow listing sessions for trainers and clients
      allow list: if isAuthenticated() && 
                  (isTrainer() || 
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)));
      
      // Admins and super trainers can do everything
      allow read, write: if isAdmin() || isSuperTrainer();
    }
    
    // Video Calls Collection Rules
    match /video_calls/{callId} {
      // Trainers can create video calls for their sessions
      allow create: if isAuthenticated() && 
                    isTrainer() && 
                    request.resource.data.trainerId == request.auth.uid;
      
      // Both trainer and client can read video call data
      allow read: if isAuthenticated() && 
                  (resource.data.trainerId == request.auth.uid || 
                   resource.data.clientId == request.auth.uid);
      
      // Trainers can update video call status and settings
      allow update: if isAuthenticated() && 
                    isTrainer() && 
                    resource.data.trainerId == request.auth.uid;
      
      // Clients can update video call when joining/leaving
      allow update: if isAuthenticated() && 
                    resource.data.clientId == request.auth.uid;
      
      // Allow both trainer and client to update call status during join/leave
      allow update: if isAuthenticated() && 
                    (resource.data.trainerId == request.auth.uid || 
                     resource.data.clientId == request.auth.uid) &&
                    request.resource.data.diff(resource.data).affectedKeys().hasAny(['trainerJoined', 'clientJoined', 'status', 'startedAt', 'endedAt', 'lastUpdated']);
      
      // Trainers can delete video calls
      allow delete: if isAuthenticated() && 
                    isTrainer() && 
                    resource.data.trainerId == request.auth.uid;
      
      // Allow listing video calls for trainers and clients
      allow list: if isAuthenticated() && 
                  (isTrainer() || 
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)));
      
      // Admins and super trainers can do everything
      allow read, write: if isAdmin() || isSuperTrainer();
    }
    
    // Tabata Timers Collection Rules
    match /tabata_timers/{timerId} {
      // Trainers can create tabata timers for their video calls
      allow create: if isAuthenticated() && 
                    isTrainer() && 
                    request.resource.data.trainerId == request.auth.uid;
      
      // Both trainer and client can read timer data
      allow read: if isAuthenticated() && 
                  (resource.data.trainerId == request.auth.uid || 
                   resource.data.clientId == request.auth.uid);
      
      // Only trainers can update timer state and configuration
      allow update: if isAuthenticated() && 
                    isTrainer() && 
                    resource.data.trainerId == request.auth.uid;
      
      // Trainers can delete timers
      allow delete: if isAuthenticated() && 
                    isTrainer() && 
                    resource.data.trainerId == request.auth.uid;
      
      // Allow listing timers for trainers and clients
      allow list: if isAuthenticated() && 
                  (isTrainer() || 
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)));
      
      // Admins and super trainers can do everything
      allow read, write: if isAdmin() || isSuperTrainer();
    }
    
    // Family Collection Rules
    match /families/{familyId} {
      // Allow any authenticated user to read and write families (loose rule for development)
      allow read, write: if isAuthenticated();
      
      // Allow creating families for authenticated users
      allow create: if isAuthenticated();
      
      // Allow any authenticated user to update families (loose rule for development)
      allow update: if isAuthenticated();
      
      // Allow any authenticated user to delete family (loose rule for development)
      allow delete: if isAuthenticated();
      
      // Family members can read the family document
      allow read: if isAuthenticated();
      
      // Allow listing families for any authenticated user
      allow list: if isAuthenticated();
      
      // Admins and super trainers retain full access (already covered by isAuthenticated)
    }
    
    // Family Invitations Collection Rules
    match /familyInvitations/{invitationId} {
      // Allow any authenticated user to create invitations (loose rule for development)
      allow create: if isAuthenticated();
      
      // Allow any authenticated user to read invitations
      allow read: if isAuthenticated();
      
      // Allow any authenticated user to update invitations
      allow update: if isAuthenticated();
      
      // Allow any authenticated user to delete invitations
      allow delete: if isAuthenticated();
      
      // Allow listing invitations for any authenticated user
      allow list: if isAuthenticated();
      
      // Admins and super trainers retain full access (already covered by isAuthenticated)
    }
  }
} 