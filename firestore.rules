rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user is a trainer - simplified for better performance in rules
    function isTrainer() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer';
    }
    
    // Check if user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // User Collection Rules
    match /users/{userId} {
      // Allow users to read their own document or any trainer document
      // This simpler rule should resolve circular reference issues
      allow read: if isAuthenticated() && (request.auth.uid == userId || 
                                         resource.data.role == 'trainer' ||
                                         isTrainer() ||
                                         isAdmin());
      
      // Allow a user to create their own document during signup
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
      
      // Allow trainers to list all clients (for client list screens)
      match /{allSubcollections=**} {
        allow read: if isAuthenticated() && (isOwner(userId) || isTrainer() || isAdmin());
      }
      
      // Allow trainers to update their clients' data
      allow update: if request.auth != null && 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer' && 
                     resource.data.trainerId == request.auth.uid;
    }
    
    // Weight History Collection Rules
    match /weightHistory/{entryId} {
      // Allow users to read and write their own weight history
      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Allow trainers to read client weight history
      allow read: if isTrainer();
      // Admins can do everything
      allow read, write: if isAdmin();
    }
    
    // Workout Collection Rules
    match /workouts/{workoutId} {
      // Users can read and write their own workouts
      // Trainers can read and write workouts for their clients
      // Admins can read and write all workouts
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isTrainer() || isAdmin());
      allow create: if isAuthenticated() && 
        (request.resource.data.userId == request.auth.uid || isTrainer() || isAdmin());
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isTrainer() || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isTrainer() || isAdmin());
    }
    
    // Workout Templates Collection Rules
    match /workoutTemplates/{templateId} {
      // Trainers can create, read, update, and delete their own templates
      // Admins can read and write all templates
      allow read: if isAuthenticated() && 
        (resource.data.trainerId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
        isTrainer() && 
        request.resource.data.trainerId == request.auth.uid;
      allow update: if isAuthenticated() && 
        isTrainer() && 
        resource.data.trainerId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        isTrainer() && 
        resource.data.trainerId == request.auth.uid;
      
      allow write: if request.auth != null && request.auth.uid == resource.data.trainerId;
    }
    
    // Assigned Workouts Collection Rules
    match /assignedWorkouts/{workoutId} {
      // Simplified rule: trainers can read ALL assigned workouts
      allow read, list: if isAuthenticated() && isTrainer();
      
      // Clients can read and update their own assigned workouts
      allow read, update: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Trainers can create, update, and delete workouts they assigned
      allow create: if isAuthenticated() && isTrainer();
      allow update, delete: if isAuthenticated() && isTrainer() && resource.data.trainerId == request.auth.uid;
      
      // Admins can do everything
      allow read, write: if isAdmin();
      
      // Client can read their own workouts, trainers can read/write their clients' workouts
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.clientId || 
                    request.auth.uid == resource.data.trainerId
                  );
      allow write: if request.auth != null && request.auth.uid == resource.data.trainerId;
      
      // Allow client to update workout status
      allow update: if request.auth != null && 
                     request.auth.uid == resource.data.clientId &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'completedExercises', 'lastModified']);
    }
    
    // Nutrition Plans Collection Rules
    match /nutritionPlans/{planId} {
      // Simplified rule: trainers can read ALL nutrition plans
      allow read, list: if isAuthenticated() && isTrainer();
      
      // Clients can read their own nutrition plans
      allow read: if isAuthenticated() && resource.data.clientId == request.auth.uid;
      
      // Trainers can create, update, and delete nutrition plans they assigned
      allow create: if isAuthenticated() && isTrainer();
      allow update, delete: if isAuthenticated() && isTrainer() && resource.data.trainerId == request.auth.uid;
      
      // Admins can do everything
      allow read, write: if isAdmin();
      
      // Client can read their own nutrition plans, trainers can read/write their clients' plans
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.clientId || 
                    request.auth.uid == resource.data.trainerId
                  );
      allow write: if request.auth != null && request.auth.uid == resource.data.trainerId;
    }
    
    // Program Collection Rules
    match /programs/{programId} {
      // Anyone can read programs
      // Only trainers and admins can create, update, delete programs
      allow read: if true;
      allow create: if isTrainer() || isAdmin();
      allow update: if isTrainer() && resource.data.trainerId == request.auth.uid || isAdmin();
      allow delete: if isTrainer() && resource.data.trainerId == request.auth.uid || isAdmin();
    }
    
    // Body Composition Collection Rules
    match /bodyComp/{userId}/{entryId} {
      // Users can read and write their own body composition data
      // Trainers can read body composition data for their clients
      // Admins can read and write all body composition data
      allow read: if isOwner(userId) || isTrainer() || isAdmin();
      allow create: if isOwner(userId) || isAdmin();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Food Log Collection Rules
    match /foodLogs/{logId} {
      // Users can read and write their own food logs
      // Trainers can read food logs for their clients
      // Admins can read and write all food logs
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isTrainer() || isAdmin());
      allow create: if isAuthenticated() && 
        (request.resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // Session Collection Rules
    match /sessions/{sessionId} {
      // Users can read sessions they're part of
      // Trainers can read and write sessions they're part of
      // Admins can read and write all sessions
      allow read: if isAuthenticated() && 
        (resource.data.clientId == request.auth.uid || 
         resource.data.trainerId == request.auth.uid || 
         isAdmin());
      // Allow both clients and trainers to create sessions
      allow create: if isAuthenticated() && 
         (request.resource.data.clientId == request.auth.uid || 
          isTrainer() || 
          isAdmin());
      // Update rule: allow clients to cancel their own sessions
      allow update: if isAuthenticated() && 
        (
          // Trainers can update any session field
          resource.data.trainerId == request.auth.uid || 
          
          // Clients can update only the status field to 'cancelled' and add notes
          (
            resource.data.clientId == request.auth.uid && 
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'notes']) &&
            request.resource.data.status == 'cancelled'
          ) || 
          
          // Admins can update anything
          isAdmin()
        );
      allow delete: if isAuthenticated() && 
        (resource.data.trainerId == request.auth.uid || isAdmin());
    }
    
    // Weight Entries Collection Rules
    match /weightEntries/{entryId} {
      // Users can read and write their own weight entries
      // Trainers can read weight entries for their clients
      // Admins can read and write all weight entries
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isTrainer() || isAdmin());
      allow create: if isAuthenticated() && 
        (request.resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // Activity Feed Collection Rules
    match /activityFeed/{activityId} {
      // Users can read their own activity feed
      // Trainers can read and write their own activity feed
      // Admins can read and write all activity feeds
      allow read: if isAuthenticated() && 
        (resource.data.trainerId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.trainerId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.trainerId == request.auth.uid || isAdmin());
      
      // Clients and trainers can read activities relevant to them
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.clientId || 
                    request.auth.uid == resource.data.trainerId
                  );
      // Only system or trainers can create activities
      allow create: if request.auth != null;
    }
    
    // Meals Collection Rules
    match /meals/{mealId} {
      // Client can create/read/update/delete their own meals
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.clientId || 
                    get(/databases/$(database)/documents/users/$(resource.data.clientId)).data.trainerId == request.auth.uid
                  );
      
      // Client can create/update/delete their own meals
      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.clientId;
    }
    
    // Trainer Locations Collection Rules
    match /trainer_locations/{trainerId} {
      // Allow trainers to write and read their own location data
      allow write, read: if isAuthenticated() && request.auth.uid == trainerId;
      
      // Allow clients to read their trainer's location data
      allow read: if isAuthenticated() && 
                  exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.trainerId == trainerId;
      
      // Allow admins full access
      allow read, write: if isAdmin();
    }
  }
} 